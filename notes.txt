JAVA FUNDAMENTALS:
Class - (abstract way of representing the objects)Hierarchy header - contains methods to perform certain actions - methods can be accessed using an object of the class.;
Method - Small piece of code performing certain action - Syntax : <Access modifier> <return type> <Method name>(){} - Ex: public void writeHelloWorldToConsole(){};
Data Types:
Whole numbers - integer or int (ex: int age = 30;)
Very big whole number - Long or long (ex: long starsInGalaxy = 10000000000000000L;)
Text values - String (ex: String name = "Joe";)
Floating point decimal values - Float or float (ex: float weight = 76.53;)
More precise Floating point decimal values - Double or double (ex: double PI = 3.141592653;)
Final Key word:
We use 'Final' key word for variables which we do not wan to change further.
String:
String is a class in java to declare text variables, with which we can use many other in built methods to work with strings (ex: length(), replace(). touppercase(). tolowercase())
Class:
Class - represent an abstract concept of an object, have properties,
Objects - are the actual things, have values,
Setters & Getters
this - is a special keyword that defines to refer to the values in class
Access modifier - Public, private

JAVA Conventions:
Class name: Class names starts with UpperCaseLetters and every other word with UpperCaseLetter (ex: CatInTheHat {})
Method names: in camel case - First letter in lowerCaseLetter and every new word with upperCaseLetter (ex: firstJavaMethod(){})
- Test method names can be written using underscores (ex: testing_ui_flow(){})
Variables: in camel case - First letter in lowerCaseLetter and every new word with upperCaseLetter (ex: firstName)
- Static Variables can be written UPPERCASE_WITH_UNDERSCORES
Comments:
- single line comment ex: //
- Multiple lines comments /*
                           * -----
                           * -----
                          */
- Java Doc    /**
                * -----
                * -----
              */
----------- Completed Module 1 up to Java Conventions (Need to watch Inheritance and Polymorphism)  -